// @generated by protoc-gen-es v2.10.0 with parameter "target=ts,import_extension=none"
// @generated from file audit/v1/topology_service.proto (package audit.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { enumDesc, fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { Duration, Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_duration, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file audit/v1/topology_service.proto.
 */
export const file_audit_v1_topology_service: GenFile = /*@__PURE__*/
  fileDesc("Ch9hdWRpdC92MS90b3BvbG9neV9zZXJ2aWNlLnByb3RvEghhdWRpdC52MSKNAQobR2V0VG9wb2xvZ3lTdHJ1Y3R1cmVSZXF1ZXN0EhUKDXNlcnZpY2VfdHlwZXMYASADKAkSJgoIc3RhdHVzZXMYAiADKA4yFC5hdWRpdC52MS5Ob2RlU3RhdHVzEhIKCnJlcXVlc3RfaWQYZCABKAlKBAgKEBBSCnBhZ2VfdG9rZW5SCXBhZ2Vfc2l6ZSLnAQoZVG9wb2xvZ3lTdHJ1Y3R1cmVSZXNwb25zZRIkCgVub2RlcxgBIAMoCzIVLmF1ZGl0LnYxLk5vZGVTdW1tYXJ5EiQKBWVkZ2VzGAIgAygLMhUuYXVkaXQudjEuRWRnZVN1bW1hcnkSMQoNc25hcHNob3RfdGltZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASEwoLc25hcHNob3RfaWQYBCABKAkSEgoKcmVxdWVzdF9pZBhkIAEoCUoECAoQEFIPbmV4dF9wYWdlX3Rva2VuUgt0b3RhbF9jb3VudCKDAgoLTm9kZVN1bW1hcnkSCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIUCgxzZXJ2aWNlX3R5cGUYAyABKAkSFQoNaW5zdGFuY2VfbmFtZRgEIAEoCRIkCgZzdGF0dXMYBSABKA4yFC5hdWRpdC52MS5Ob2RlU3RhdHVzEjEKBmxhYmVscxgGIAMoCzIhLmF1ZGl0LnYxLk5vZGVTdW1tYXJ5LkxhYmVsc0VudHJ5Gi0KC0xhYmVsc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFKBAgKEBVSCW5vZGVfdHlwZVIKY2x1c3Rlcl9pZFIIcHJpb3JpdHki1gEKC0VkZ2VTdW1tYXJ5EgoKAmlkGAEgASgJEhEKCXNvdXJjZV9pZBgCIAEoCRIRCgl0YXJnZXRfaWQYAyABKAkSJgoEdHlwZRgEIAEoDjIYLmF1ZGl0LnYxLkNvbm5lY3Rpb25UeXBlEiQKBnN0YXR1cxgFIAEoDjIULmF1ZGl0LnYxLkVkZ2VTdGF0dXMSEwoLaXNfY3JpdGljYWwYBiABKAhKBAgKEBVSCWJhbmR3aWR0aFIQcHJvdG9jb2xfdmVyc2lvblIPZW5jcnlwdGlvbl90eXBlInoKFkdldE5vZGVNZXRhZGF0YVJlcXVlc3QSEAoIbm9kZV9pZHMYASADKAkSNAoRbWV0YWRhdGFfc2VjdGlvbnMYAiADKA4yGS5hdWRpdC52MS5NZXRhZGF0YVNlY3Rpb24SEgoKcmVxdWVzdF9pZBhkIAEoCUoECAoQECK5AQoXR2V0Tm9kZU1ldGFkYXRhUmVzcG9uc2USQQoIbWV0YWRhdGEYASADKAsyLy5hdWRpdC52MS5HZXROb2RlTWV0YWRhdGFSZXNwb25zZS5NZXRhZGF0YUVudHJ5EhIKCnJlcXVlc3RfaWQYZCABKAkaRwoNTWV0YWRhdGFFbnRyeRILCgNrZXkYASABKAkSJQoFdmFsdWUYAiABKAsyFi5hdWRpdC52MS5Ob2RlTWV0YWRhdGE6AjgBIosCCgxOb2RlTWV0YWRhdGESJwoKYmFzaWNfaW5mbxgBIAEoCzITLmF1ZGl0LnYxLkJhc2ljSW5mbxIvCg5oZWFsdGhfbWV0cmljcxgCIAEoCzIXLmF1ZGl0LnYxLkhlYWx0aE1ldHJpY3MSKQoJZW5kcG9pbnRzGAMgASgLMhYuYXVkaXQudjEuRW5kcG9pbnRJbmZvEkAKDWNvbmZpZ3VyYXRpb24YBCADKAsyKS5hdWRpdC52MS5Ob2RlTWV0YWRhdGEuQ29uZmlndXJhdGlvbkVudHJ5GjQKEkNvbmZpZ3VyYXRpb25FbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIpABCglCYXNpY0luZm8SDwoHdmVyc2lvbhgBIAEoCRIuCgpzdGFydGVkX2F0GAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBItCglsYXN0X3NlZW4YAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhMKC2Vudmlyb25tZW50GAQgASgJIqoBCg1IZWFsdGhNZXRyaWNzEhMKC2NwdV9wZXJjZW50GAEgASgBEhEKCW1lbW9yeV9tYhgCIAEoARIWCg50b3RhbF9yZXF1ZXN0cxgDIAEoAxIUCgx0b3RhbF9lcnJvcnMYBCABKAMSEgoKZXJyb3JfcmF0ZRgFIAEoARIvCgttZWFzdXJlZF9hdBgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAiWQoMRW5kcG9pbnRJbmZvEhYKDmdycGNfZW5kcG9pbnRzGAEgAygJEhYKDmh0dHBfZW5kcG9pbnRzGAIgAygJEhkKEW1ldHJpY3NfZW5kcG9pbnRzGAMgAygJInoKFkdldEVkZ2VNZXRhZGF0YVJlcXVlc3QSEAoIZWRnZV9pZHMYASADKAkSNAoRbWV0YWRhdGFfc2VjdGlvbnMYAiADKA4yGS5hdWRpdC52MS5NZXRhZGF0YVNlY3Rpb24SEgoKcmVxdWVzdF9pZBhkIAEoCUoECAoQECK5AQoXR2V0RWRnZU1ldGFkYXRhUmVzcG9uc2USQQoIbWV0YWRhdGEYASADKAsyLy5hdWRpdC52MS5HZXRFZGdlTWV0YWRhdGFSZXNwb25zZS5NZXRhZGF0YUVudHJ5EhIKCnJlcXVlc3RfaWQYZCABKAkaRwoNTWV0YWRhdGFFbnRyeRILCgNrZXkYASABKAkSJQoFdmFsdWUYAiABKAsyFi5hdWRpdC52MS5FZGdlTWV0YWRhdGE6AjgBImoKDEVkZ2VNZXRhZGF0YRIsCgdtZXRyaWNzGAEgASgLMhsuYXVkaXQudjEuQ29ubmVjdGlvbk1ldHJpY3MSLAoHZGV0YWlscxgCIAEoCzIbLmF1ZGl0LnYxLkNvbm5lY3Rpb25EZXRhaWxzIroBChFDb25uZWN0aW9uTWV0cmljcxIWCg5sYXRlbmN5X3A1MF9tcxgBIAEoARIWCg5sYXRlbmN5X3A5OV9tcxgCIAEoARIWCg50aHJvdWdocHV0X3JwcxgDIAEoAxISCgplcnJvcl9yYXRlGAQgASgBEhgKEHRvdGFsX2J5dGVzX3NlbnQYBSABKAMSLwoLbWVhc3VyZWRfYXQYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wImoKEUNvbm5lY3Rpb25EZXRhaWxzEhAKCHByb3RvY29sGAEgASgJEg8KB21ldGhvZHMYAiADKAkSMgoOZXN0YWJsaXNoZWRfYXQYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wIk8KHFN0cmVhbVRvcG9sb2d5Q2hhbmdlc1JlcXVlc3QSGAoQZnJvbV9zbmFwc2hvdF9pZBgBIAEoCRIVCg1zZXJ2aWNlX3R5cGVzGAIgAygJIooDCg5Ub3BvbG9neUNoYW5nZRItCgl0aW1lc3RhbXAYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhMKC3NuYXBzaG90X2lkGAIgASgJEikKCm5vZGVfYWRkZWQYAyABKAsyEy5hdWRpdC52MS5Ob2RlQWRkZWRIABItCgxub2RlX3JlbW92ZWQYBCABKAsyFS5hdWRpdC52MS5Ob2RlUmVtb3ZlZEgAEjoKE25vZGVfc3RhdHVzX2NoYW5nZWQYBSABKAsyGy5hdWRpdC52MS5Ob2RlU3RhdHVzQ2hhbmdlZEgAEikKCmVkZ2VfYWRkZWQYBiABKAsyEy5hdWRpdC52MS5FZGdlQWRkZWRIABItCgxlZGdlX3JlbW92ZWQYByABKAsyFS5hdWRpdC52MS5FZGdlUmVtb3ZlZEgAEjoKE2VkZ2Vfc3RhdHVzX2NoYW5nZWQYCCABKAsyGy5hdWRpdC52MS5FZGdlU3RhdHVzQ2hhbmdlZEgAQggKBmNoYW5nZSIwCglOb2RlQWRkZWQSIwoEbm9kZRgBIAEoCzIVLmF1ZGl0LnYxLk5vZGVTdW1tYXJ5Ii4KC05vZGVSZW1vdmVkEg8KB25vZGVfaWQYASABKAkSDgoGcmVhc29uGAIgASgJIogBChFOb2RlU3RhdHVzQ2hhbmdlZBIPCgdub2RlX2lkGAEgASgJEigKCm9sZF9zdGF0dXMYAiABKA4yFC5hdWRpdC52MS5Ob2RlU3RhdHVzEigKCm5ld19zdGF0dXMYAyABKA4yFC5hdWRpdC52MS5Ob2RlU3RhdHVzEg4KBnJlYXNvbhgEIAEoCSIwCglFZGdlQWRkZWQSIwoEZWRnZRgBIAEoCzIVLmF1ZGl0LnYxLkVkZ2VTdW1tYXJ5Ii4KC0VkZ2VSZW1vdmVkEg8KB2VkZ2VfaWQYASABKAkSDgoGcmVhc29uGAIgASgJIogBChFFZGdlU3RhdHVzQ2hhbmdlZBIPCgdlZGdlX2lkGAEgASgJEigKCm9sZF9zdGF0dXMYAiABKA4yFC5hdWRpdC52MS5FZGdlU3RhdHVzEigKCm5ld19zdGF0dXMYAyABKA4yFC5hdWRpdC52MS5FZGdlU3RhdHVzEg4KBnJlYXNvbhgEIAEoCSLLAQobU3RyZWFtTWV0cmljc1VwZGF0ZXNSZXF1ZXN0EhAKCG5vZGVfaWRzGAEgAygJEhAKCGVkZ2VfaWRzGAIgAygJEhUKDXNlcnZpY2VfdHlwZXMYAyADKAkSMgoPdXBkYXRlX2ludGVydmFsGAQgASgLMhkuZ29vZ2xlLnByb3RvYnVmLkR1cmF0aW9uEhIKCnJlcXVlc3RfaWQYZCABKAlKBAgKEBBSD3Rocm90dGxlX3BvbGljeVISYWdncmVnYXRpb25fd2luZG93IrIBCg1NZXRyaWNzVXBkYXRlEi0KCXRpbWVzdGFtcBgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMwoMbm9kZV9tZXRyaWNzGAIgASgLMhsuYXVkaXQudjEuTm9kZU1ldHJpY3NVcGRhdGVIABIzCgxlZGdlX21ldHJpY3MYAyABKAsyGy5hdWRpdC52MS5FZGdlTWV0cmljc1VwZGF0ZUgAQggKBnVwZGF0ZSJOChFOb2RlTWV0cmljc1VwZGF0ZRIPCgdub2RlX2lkGAEgASgJEigKB21ldHJpY3MYAiABKAsyFy5hdWRpdC52MS5IZWFsdGhNZXRyaWNzIlIKEUVkZ2VNZXRyaWNzVXBkYXRlEg8KB2VkZ2VfaWQYASABKAkSLAoHbWV0cmljcxgCIAEoCzIbLmF1ZGl0LnYxLkNvbm5lY3Rpb25NZXRyaWNzKm8KCk5vZGVTdGF0dXMSGwoXTk9ERV9TVEFUVVNfVU5TUEVDSUZJRUQQABIUChBOT0RFX1NUQVRVU19MSVZFEAESGAoUTk9ERV9TVEFUVVNfREVHUkFERUQQAhIUChBOT0RFX1NUQVRVU19ERUFEEAMqcwoKRWRnZVN0YXR1cxIbChdFREdFX1NUQVRVU19VTlNQRUNJRklFRBAAEhYKEkVER0VfU1RBVFVTX0FDVElWRRABEhgKFEVER0VfU1RBVFVTX0RFR1JBREVEEAISFgoSRURHRV9TVEFUVVNfRkFJTEVEEAMqhAEKDkNvbm5lY3Rpb25UeXBlEh8KG0NPTk5FQ1RJT05fVFlQRV9VTlNQRUNJRklFRBAAEhgKFENPTk5FQ1RJT05fVFlQRV9HUlBDEAESGAoUQ09OTkVDVElPTl9UWVBFX0hUVFAQAhIdChlDT05ORUNUSU9OX1RZUEVfREFUQV9GTE9XEAMqvQEKD01ldGFkYXRhU2VjdGlvbhIgChxNRVRBREFUQV9TRUNUSU9OX1VOU1BFQ0lGSUVEEAASHwobTUVUQURBVEFfU0VDVElPTl9CQVNJQ19JTkZPEAESIwofTUVUQURBVEFfU0VDVElPTl9IRUFMVEhfTUVUUklDUxACEh4KGk1FVEFEQVRBX1NFQ1RJT05fRU5EUE9JTlRTEAMSIgoeTUVUQURBVEFfU0VDVElPTl9DT05GSUdVUkFUSU9OEAQy3AMKD1RvcG9sb2d5U2VydmljZRJiChRHZXRUb3BvbG9neVN0cnVjdHVyZRIlLmF1ZGl0LnYxLkdldFRvcG9sb2d5U3RydWN0dXJlUmVxdWVzdBojLmF1ZGl0LnYxLlRvcG9sb2d5U3RydWN0dXJlUmVzcG9uc2USVgoPR2V0Tm9kZU1ldGFkYXRhEiAuYXVkaXQudjEuR2V0Tm9kZU1ldGFkYXRhUmVxdWVzdBohLmF1ZGl0LnYxLkdldE5vZGVNZXRhZGF0YVJlc3BvbnNlElYKD0dldEVkZ2VNZXRhZGF0YRIgLmF1ZGl0LnYxLkdldEVkZ2VNZXRhZGF0YVJlcXVlc3QaIS5hdWRpdC52MS5HZXRFZGdlTWV0YWRhdGFSZXNwb25zZRJbChVTdHJlYW1Ub3BvbG9neUNoYW5nZXMSJi5hdWRpdC52MS5TdHJlYW1Ub3BvbG9neUNoYW5nZXNSZXF1ZXN0GhguYXVkaXQudjEuVG9wb2xvZ3lDaGFuZ2UwARJYChRTdHJlYW1NZXRyaWNzVXBkYXRlcxIlLmF1ZGl0LnYxLlN0cmVhbU1ldHJpY3NVcGRhdGVzUmVxdWVzdBoXLmF1ZGl0LnYxLk1ldHJpY3NVcGRhdGUwAUKqAQoMY29tLmF1ZGl0LnYxQhRUb3BvbG9neVNlcnZpY2VQcm90b1ABWkNnaXRodWIuY29tL3F1YW50ZmlkZW50aWFsL3RyYWRpbmctZWNvc3lzdGVtL2dlbi9nby9hdWRpdC92MTthdWRpdHYxogIDQVhYqgIIQXVkaXQuVjHKAghBdWRpdFxWMeICFEF1ZGl0XFYxXEdQQk1ldGFkYXRh6gIJQXVkaXQ6OlYxYgZwcm90bzM", [file_google_protobuf_timestamp, file_google_protobuf_duration]);

/**
 * @generated from message audit.v1.GetTopologyStructureRequest
 */
export type GetTopologyStructureRequest = Message<"audit.v1.GetTopologyStructureRequest"> & {
  /**
   * Optional filter by service types (e.g., ["exchange-simulator", "custodian-simulator"])
   *
   * @generated from field: repeated string service_types = 1;
   */
  serviceTypes: string[];

  /**
   * Optional filter by node status
   *
   * @generated from field: repeated audit.v1.NodeStatus statuses = 2;
   */
  statuses: NodeStatus[];

  /**
   * System fields (100+)
   * Optional request correlation ID for distributed tracing
   *
   * @generated from field: string request_id = 100;
   */
  requestId: string;
};

/**
 * Describes the message audit.v1.GetTopologyStructureRequest.
 * Use `create(GetTopologyStructureRequestSchema)` to create a new message.
 */
export const GetTopologyStructureRequestSchema: GenMessage<GetTopologyStructureRequest> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 0);

/**
 * @generated from message audit.v1.TopologyStructureResponse
 */
export type TopologyStructureResponse = Message<"audit.v1.TopologyStructureResponse"> & {
  /**
   * List of service nodes
   *
   * @generated from field: repeated audit.v1.NodeSummary nodes = 1;
   */
  nodes: NodeSummary[];

  /**
   * List of directed edges between nodes
   *
   * @generated from field: repeated audit.v1.EdgeSummary edges = 2;
   */
  edges: EdgeSummary[];

  /**
   * Timestamp of this topology snapshot
   *
   * @generated from field: google.protobuf.Timestamp snapshot_time = 3;
   */
  snapshotTime?: Timestamp;

  /**
   * Unique snapshot identifier for incremental updates
   *
   * @generated from field: string snapshot_id = 4;
   */
  snapshotId: string;

  /**
   * System fields (100+)
   * Request correlation ID (echoed from request)
   *
   * @generated from field: string request_id = 100;
   */
  requestId: string;
};

/**
 * Describes the message audit.v1.TopologyStructureResponse.
 * Use `create(TopologyStructureResponseSchema)` to create a new message.
 */
export const TopologyStructureResponseSchema: GenMessage<TopologyStructureResponse> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 1);

/**
 * @generated from message audit.v1.NodeSummary
 */
export type NodeSummary = Message<"audit.v1.NodeSummary"> & {
  /**
   * Unique node identifier (e.g., "exchange-okx")
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Display name (e.g., "Exchange OKX")
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * Service type (e.g., "exchange-simulator", "risk-monitor")
   *
   * @generated from field: string service_type = 3;
   */
  serviceType: string;

  /**
   * Instance name (e.g., "exchange-okx", "risk-monitor-lh")
   *
   * @generated from field: string instance_name = 4;
   */
  instanceName: string;

  /**
   * Current node status
   *
   * @generated from field: audit.v1.NodeStatus status = 5;
   */
  status: NodeStatus;

  /**
   * Labels for grouping/filtering (e.g., {"provider": "okx", "region": "us"})
   *
   * @generated from field: map<string, string> labels = 6;
   */
  labels: { [key: string]: string };
};

/**
 * Describes the message audit.v1.NodeSummary.
 * Use `create(NodeSummarySchema)` to create a new message.
 */
export const NodeSummarySchema: GenMessage<NodeSummary> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 2);

/**
 * @generated from message audit.v1.EdgeSummary
 */
export type EdgeSummary = Message<"audit.v1.EdgeSummary"> & {
  /**
   * Unique edge identifier
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * Source node ID (directional: from)
   *
   * @generated from field: string source_id = 2;
   */
  sourceId: string;

  /**
   * Target node ID (directional: to)
   *
   * @generated from field: string target_id = 3;
   */
  targetId: string;

  /**
   * Connection type
   *
   * @generated from field: audit.v1.ConnectionType type = 4;
   */
  type: ConnectionType;

  /**
   * Current edge status
   *
   * @generated from field: audit.v1.EdgeStatus status = 5;
   */
  status: EdgeStatus;

  /**
   * Whether this is a critical connection (visual hint: thicker line)
   *
   * @generated from field: bool is_critical = 6;
   */
  isCritical: boolean;
};

/**
 * Describes the message audit.v1.EdgeSummary.
 * Use `create(EdgeSummarySchema)` to create a new message.
 */
export const EdgeSummarySchema: GenMessage<EdgeSummary> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 3);

/**
 * @generated from message audit.v1.GetNodeMetadataRequest
 */
export type GetNodeMetadataRequest = Message<"audit.v1.GetNodeMetadataRequest"> & {
  /**
   * Node IDs to fetch metadata for. Empty = all nodes.
   *
   * @generated from field: repeated string node_ids = 1;
   */
  nodeIds: string[];

  /**
   * Configurable metadata sections to fetch
   * If empty, returns all available metadata
   *
   * @generated from field: repeated audit.v1.MetadataSection metadata_sections = 2;
   */
  metadataSections: MetadataSection[];

  /**
   * System fields (100+)
   *
   * @generated from field: string request_id = 100;
   */
  requestId: string;
};

/**
 * Describes the message audit.v1.GetNodeMetadataRequest.
 * Use `create(GetNodeMetadataRequestSchema)` to create a new message.
 */
export const GetNodeMetadataRequestSchema: GenMessage<GetNodeMetadataRequest> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 4);

/**
 * @generated from message audit.v1.GetNodeMetadataResponse
 */
export type GetNodeMetadataResponse = Message<"audit.v1.GetNodeMetadataResponse"> & {
  /**
   * Map of node_id to metadata
   *
   * @generated from field: map<string, audit.v1.NodeMetadata> metadata = 1;
   */
  metadata: { [key: string]: NodeMetadata };

  /**
   * System fields (100+)
   *
   * @generated from field: string request_id = 100;
   */
  requestId: string;
};

/**
 * Describes the message audit.v1.GetNodeMetadataResponse.
 * Use `create(GetNodeMetadataResponseSchema)` to create a new message.
 */
export const GetNodeMetadataResponseSchema: GenMessage<GetNodeMetadataResponse> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 5);

/**
 * @generated from message audit.v1.NodeMetadata
 */
export type NodeMetadata = Message<"audit.v1.NodeMetadata"> & {
  /**
   * Basic service information
   *
   * @generated from field: audit.v1.BasicInfo basic_info = 1;
   */
  basicInfo?: BasicInfo;

  /**
   * Health metrics (CPU, memory, requests, errors)
   *
   * @generated from field: audit.v1.HealthMetrics health_metrics = 2;
   */
  healthMetrics?: HealthMetrics;

  /**
   * Service endpoints
   *
   * @generated from field: audit.v1.EndpointInfo endpoints = 3;
   */
  endpoints?: EndpointInfo;

  /**
   * Service configuration
   *
   * @generated from field: map<string, string> configuration = 4;
   */
  configuration: { [key: string]: string };
};

/**
 * Describes the message audit.v1.NodeMetadata.
 * Use `create(NodeMetadataSchema)` to create a new message.
 */
export const NodeMetadataSchema: GenMessage<NodeMetadata> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 6);

/**
 * @generated from message audit.v1.BasicInfo
 */
export type BasicInfo = Message<"audit.v1.BasicInfo"> & {
  /**
   * Service version
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * Service start time
   *
   * @generated from field: google.protobuf.Timestamp started_at = 2;
   */
  startedAt?: Timestamp;

  /**
   * Last health check time
   *
   * @generated from field: google.protobuf.Timestamp last_seen = 3;
   */
  lastSeen?: Timestamp;

  /**
   * Deployment environment (e.g., "docker", "k8s")
   *
   * @generated from field: string environment = 4;
   */
  environment: string;
};

/**
 * Describes the message audit.v1.BasicInfo.
 * Use `create(BasicInfoSchema)` to create a new message.
 */
export const BasicInfoSchema: GenMessage<BasicInfo> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 7);

/**
 * @generated from message audit.v1.HealthMetrics
 */
export type HealthMetrics = Message<"audit.v1.HealthMetrics"> & {
  /**
   * CPU usage percentage (0-100)
   *
   * @generated from field: double cpu_percent = 1;
   */
  cpuPercent: number;

  /**
   * Memory usage in megabytes
   *
   * @generated from field: double memory_mb = 2;
   */
  memoryMb: number;

  /**
   * Total requests since start
   *
   * @generated from field: int64 total_requests = 3;
   */
  totalRequests: bigint;

  /**
   * Total errors since start
   *
   * @generated from field: int64 total_errors = 4;
   */
  totalErrors: bigint;

  /**
   * Current error rate (0.0-1.0)
   *
   * @generated from field: double error_rate = 5;
   */
  errorRate: number;

  /**
   * Timestamp when metrics were measured
   *
   * @generated from field: google.protobuf.Timestamp measured_at = 6;
   */
  measuredAt?: Timestamp;
};

/**
 * Describes the message audit.v1.HealthMetrics.
 * Use `create(HealthMetricsSchema)` to create a new message.
 */
export const HealthMetricsSchema: GenMessage<HealthMetrics> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 8);

/**
 * @generated from message audit.v1.EndpointInfo
 */
export type EndpointInfo = Message<"audit.v1.EndpointInfo"> & {
  /**
   * gRPC endpoints (e.g., ["localhost:50051"])
   *
   * @generated from field: repeated string grpc_endpoints = 1;
   */
  grpcEndpoints: string[];

  /**
   * HTTP/REST endpoints (e.g., ["http://localhost:8080"])
   *
   * @generated from field: repeated string http_endpoints = 2;
   */
  httpEndpoints: string[];

  /**
   * Prometheus metrics endpoints (e.g., ["http://localhost:9090/metrics"])
   *
   * @generated from field: repeated string metrics_endpoints = 3;
   */
  metricsEndpoints: string[];
};

/**
 * Describes the message audit.v1.EndpointInfo.
 * Use `create(EndpointInfoSchema)` to create a new message.
 */
export const EndpointInfoSchema: GenMessage<EndpointInfo> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 9);

/**
 * @generated from message audit.v1.GetEdgeMetadataRequest
 */
export type GetEdgeMetadataRequest = Message<"audit.v1.GetEdgeMetadataRequest"> & {
  /**
   * Edge IDs to fetch metadata for
   *
   * @generated from field: repeated string edge_ids = 1;
   */
  edgeIds: string[];

  /**
   * Configurable metadata sections to fetch
   *
   * @generated from field: repeated audit.v1.MetadataSection metadata_sections = 2;
   */
  metadataSections: MetadataSection[];

  /**
   * System fields (100+)
   *
   * @generated from field: string request_id = 100;
   */
  requestId: string;
};

/**
 * Describes the message audit.v1.GetEdgeMetadataRequest.
 * Use `create(GetEdgeMetadataRequestSchema)` to create a new message.
 */
export const GetEdgeMetadataRequestSchema: GenMessage<GetEdgeMetadataRequest> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 10);

/**
 * @generated from message audit.v1.GetEdgeMetadataResponse
 */
export type GetEdgeMetadataResponse = Message<"audit.v1.GetEdgeMetadataResponse"> & {
  /**
   * Map of edge_id to metadata
   *
   * @generated from field: map<string, audit.v1.EdgeMetadata> metadata = 1;
   */
  metadata: { [key: string]: EdgeMetadata };

  /**
   * System fields (100+)
   *
   * @generated from field: string request_id = 100;
   */
  requestId: string;
};

/**
 * Describes the message audit.v1.GetEdgeMetadataResponse.
 * Use `create(GetEdgeMetadataResponseSchema)` to create a new message.
 */
export const GetEdgeMetadataResponseSchema: GenMessage<GetEdgeMetadataResponse> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 11);

/**
 * @generated from message audit.v1.EdgeMetadata
 */
export type EdgeMetadata = Message<"audit.v1.EdgeMetadata"> & {
  /**
   * Connection metrics (latency, throughput, errors)
   *
   * @generated from field: audit.v1.ConnectionMetrics metrics = 1;
   */
  metrics?: ConnectionMetrics;

  /**
   * Connection details (protocol, methods, established time)
   *
   * @generated from field: audit.v1.ConnectionDetails details = 2;
   */
  details?: ConnectionDetails;
};

/**
 * Describes the message audit.v1.EdgeMetadata.
 * Use `create(EdgeMetadataSchema)` to create a new message.
 */
export const EdgeMetadataSchema: GenMessage<EdgeMetadata> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 12);

/**
 * @generated from message audit.v1.ConnectionMetrics
 */
export type ConnectionMetrics = Message<"audit.v1.ConnectionMetrics"> & {
  /**
   * Median latency in milliseconds
   *
   * @generated from field: double latency_p50_ms = 1;
   */
  latencyP50Ms: number;

  /**
   * 99th percentile latency in milliseconds
   *
   * @generated from field: double latency_p99_ms = 2;
   */
  latencyP99Ms: number;

  /**
   * Throughput in requests per second
   *
   * @generated from field: int64 throughput_rps = 3;
   */
  throughputRps: bigint;

  /**
   * Error rate (0.0-1.0)
   *
   * @generated from field: double error_rate = 4;
   */
  errorRate: number;

  /**
   * Total bytes sent over this connection
   *
   * @generated from field: int64 total_bytes_sent = 5;
   */
  totalBytesSent: bigint;

  /**
   * Timestamp when metrics were measured
   *
   * @generated from field: google.protobuf.Timestamp measured_at = 6;
   */
  measuredAt?: Timestamp;
};

/**
 * Describes the message audit.v1.ConnectionMetrics.
 * Use `create(ConnectionMetricsSchema)` to create a new message.
 */
export const ConnectionMetricsSchema: GenMessage<ConnectionMetrics> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 13);

/**
 * @generated from message audit.v1.ConnectionDetails
 */
export type ConnectionDetails = Message<"audit.v1.ConnectionDetails"> & {
  /**
   * Protocol (e.g., "gRPC", "HTTP/1.1", "HTTP/2")
   *
   * @generated from field: string protocol = 1;
   */
  protocol: string;

  /**
   * Methods/endpoints called over this connection
   *
   * @generated from field: repeated string methods = 2;
   */
  methods: string[];

  /**
   * Time when connection was established
   *
   * @generated from field: google.protobuf.Timestamp established_at = 3;
   */
  establishedAt?: Timestamp;
};

/**
 * Describes the message audit.v1.ConnectionDetails.
 * Use `create(ConnectionDetailsSchema)` to create a new message.
 */
export const ConnectionDetailsSchema: GenMessage<ConnectionDetails> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 14);

/**
 * @generated from message audit.v1.StreamTopologyChangesRequest
 */
export type StreamTopologyChangesRequest = Message<"audit.v1.StreamTopologyChangesRequest"> & {
  /**
   * Snapshot ID to resume from (missed changes are NOT replayed)
   *
   * @generated from field: string from_snapshot_id = 1;
   */
  fromSnapshotId: string;

  /**
   * Optional filter by service types
   *
   * @generated from field: repeated string service_types = 2;
   */
  serviceTypes: string[];
};

/**
 * Describes the message audit.v1.StreamTopologyChangesRequest.
 * Use `create(StreamTopologyChangesRequestSchema)` to create a new message.
 */
export const StreamTopologyChangesRequestSchema: GenMessage<StreamTopologyChangesRequest> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 15);

/**
 * @generated from message audit.v1.TopologyChange
 */
export type TopologyChange = Message<"audit.v1.TopologyChange"> & {
  /**
   * Timestamp of this change
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * Updated snapshot ID after this change
   *
   * @generated from field: string snapshot_id = 2;
   */
  snapshotId: string;

  /**
   * The specific change (oneof ensures exactly one)
   *
   * @generated from oneof audit.v1.TopologyChange.change
   */
  change: {
    /**
     * @generated from field: audit.v1.NodeAdded node_added = 3;
     */
    value: NodeAdded;
    case: "nodeAdded";
  } | {
    /**
     * @generated from field: audit.v1.NodeRemoved node_removed = 4;
     */
    value: NodeRemoved;
    case: "nodeRemoved";
  } | {
    /**
     * @generated from field: audit.v1.NodeStatusChanged node_status_changed = 5;
     */
    value: NodeStatusChanged;
    case: "nodeStatusChanged";
  } | {
    /**
     * @generated from field: audit.v1.EdgeAdded edge_added = 6;
     */
    value: EdgeAdded;
    case: "edgeAdded";
  } | {
    /**
     * @generated from field: audit.v1.EdgeRemoved edge_removed = 7;
     */
    value: EdgeRemoved;
    case: "edgeRemoved";
  } | {
    /**
     * @generated from field: audit.v1.EdgeStatusChanged edge_status_changed = 8;
     */
    value: EdgeStatusChanged;
    case: "edgeStatusChanged";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message audit.v1.TopologyChange.
 * Use `create(TopologyChangeSchema)` to create a new message.
 */
export const TopologyChangeSchema: GenMessage<TopologyChange> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 16);

/**
 * @generated from message audit.v1.NodeAdded
 */
export type NodeAdded = Message<"audit.v1.NodeAdded"> & {
  /**
   * The newly added node
   *
   * @generated from field: audit.v1.NodeSummary node = 1;
   */
  node?: NodeSummary;
};

/**
 * Describes the message audit.v1.NodeAdded.
 * Use `create(NodeAddedSchema)` to create a new message.
 */
export const NodeAddedSchema: GenMessage<NodeAdded> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 17);

/**
 * @generated from message audit.v1.NodeRemoved
 */
export type NodeRemoved = Message<"audit.v1.NodeRemoved"> & {
  /**
   * ID of the removed node
   *
   * @generated from field: string node_id = 1;
   */
  nodeId: string;

  /**
   * Reason for removal (e.g., "shutdown", "crashed", "timeout")
   *
   * @generated from field: string reason = 2;
   */
  reason: string;
};

/**
 * Describes the message audit.v1.NodeRemoved.
 * Use `create(NodeRemovedSchema)` to create a new message.
 */
export const NodeRemovedSchema: GenMessage<NodeRemoved> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 18);

/**
 * @generated from message audit.v1.NodeStatusChanged
 */
export type NodeStatusChanged = Message<"audit.v1.NodeStatusChanged"> & {
  /**
   * ID of the node with changed status
   *
   * @generated from field: string node_id = 1;
   */
  nodeId: string;

  /**
   * Previous status
   *
   * @generated from field: audit.v1.NodeStatus old_status = 2;
   */
  oldStatus: NodeStatus;

  /**
   * New status
   *
   * @generated from field: audit.v1.NodeStatus new_status = 3;
   */
  newStatus: NodeStatus;

  /**
   * Reason for change (e.g., "health_check_failed", "recovered")
   *
   * @generated from field: string reason = 4;
   */
  reason: string;
};

/**
 * Describes the message audit.v1.NodeStatusChanged.
 * Use `create(NodeStatusChangedSchema)` to create a new message.
 */
export const NodeStatusChangedSchema: GenMessage<NodeStatusChanged> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 19);

/**
 * @generated from message audit.v1.EdgeAdded
 */
export type EdgeAdded = Message<"audit.v1.EdgeAdded"> & {
  /**
   * The newly added edge
   *
   * @generated from field: audit.v1.EdgeSummary edge = 1;
   */
  edge?: EdgeSummary;
};

/**
 * Describes the message audit.v1.EdgeAdded.
 * Use `create(EdgeAddedSchema)` to create a new message.
 */
export const EdgeAddedSchema: GenMessage<EdgeAdded> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 20);

/**
 * @generated from message audit.v1.EdgeRemoved
 */
export type EdgeRemoved = Message<"audit.v1.EdgeRemoved"> & {
  /**
   * ID of the removed edge
   *
   * @generated from field: string edge_id = 1;
   */
  edgeId: string;

  /**
   * Reason for removal (e.g., "node_removed", "connection_closed")
   *
   * @generated from field: string reason = 2;
   */
  reason: string;
};

/**
 * Describes the message audit.v1.EdgeRemoved.
 * Use `create(EdgeRemovedSchema)` to create a new message.
 */
export const EdgeRemovedSchema: GenMessage<EdgeRemoved> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 21);

/**
 * @generated from message audit.v1.EdgeStatusChanged
 */
export type EdgeStatusChanged = Message<"audit.v1.EdgeStatusChanged"> & {
  /**
   * ID of the edge with changed status
   *
   * @generated from field: string edge_id = 1;
   */
  edgeId: string;

  /**
   * Previous status
   *
   * @generated from field: audit.v1.EdgeStatus old_status = 2;
   */
  oldStatus: EdgeStatus;

  /**
   * New status
   *
   * @generated from field: audit.v1.EdgeStatus new_status = 3;
   */
  newStatus: EdgeStatus;

  /**
   * Reason for change (e.g., "high_latency", "timeout", "recovered")
   *
   * @generated from field: string reason = 4;
   */
  reason: string;
};

/**
 * Describes the message audit.v1.EdgeStatusChanged.
 * Use `create(EdgeStatusChangedSchema)` to create a new message.
 */
export const EdgeStatusChangedSchema: GenMessage<EdgeStatusChanged> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 22);

/**
 * @generated from message audit.v1.StreamMetricsUpdatesRequest
 */
export type StreamMetricsUpdatesRequest = Message<"audit.v1.StreamMetricsUpdatesRequest"> & {
  /**
   * Node IDs to subscribe to. Empty = all nodes.
   *
   * @generated from field: repeated string node_ids = 1;
   */
  nodeIds: string[];

  /**
   * Edge IDs to subscribe to. Empty = all edges.
   *
   * @generated from field: repeated string edge_ids = 2;
   */
  edgeIds: string[];

  /**
   * Alternative: filter by service types
   *
   * @generated from field: repeated string service_types = 3;
   */
  serviceTypes: string[];

  /**
   * Update interval (minimum 1 second, enforced server-side)
   * Valid range: 1s - 60s
   *
   * @generated from field: google.protobuf.Duration update_interval = 4;
   */
  updateInterval?: Duration;

  /**
   * System fields (100+)
   *
   * @generated from field: string request_id = 100;
   */
  requestId: string;
};

/**
 * Describes the message audit.v1.StreamMetricsUpdatesRequest.
 * Use `create(StreamMetricsUpdatesRequestSchema)` to create a new message.
 */
export const StreamMetricsUpdatesRequestSchema: GenMessage<StreamMetricsUpdatesRequest> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 23);

/**
 * @generated from message audit.v1.MetricsUpdate
 */
export type MetricsUpdate = Message<"audit.v1.MetricsUpdate"> & {
  /**
   * Timestamp of this update
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * The specific update (oneof ensures exactly one)
   *
   * @generated from oneof audit.v1.MetricsUpdate.update
   */
  update: {
    /**
     * @generated from field: audit.v1.NodeMetricsUpdate node_metrics = 2;
     */
    value: NodeMetricsUpdate;
    case: "nodeMetrics";
  } | {
    /**
     * @generated from field: audit.v1.EdgeMetricsUpdate edge_metrics = 3;
     */
    value: EdgeMetricsUpdate;
    case: "edgeMetrics";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message audit.v1.MetricsUpdate.
 * Use `create(MetricsUpdateSchema)` to create a new message.
 */
export const MetricsUpdateSchema: GenMessage<MetricsUpdate> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 24);

/**
 * @generated from message audit.v1.NodeMetricsUpdate
 */
export type NodeMetricsUpdate = Message<"audit.v1.NodeMetricsUpdate"> & {
  /**
   * ID of the node
   *
   * @generated from field: string node_id = 1;
   */
  nodeId: string;

  /**
   * Updated health metrics
   *
   * @generated from field: audit.v1.HealthMetrics metrics = 2;
   */
  metrics?: HealthMetrics;
};

/**
 * Describes the message audit.v1.NodeMetricsUpdate.
 * Use `create(NodeMetricsUpdateSchema)` to create a new message.
 */
export const NodeMetricsUpdateSchema: GenMessage<NodeMetricsUpdate> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 25);

/**
 * @generated from message audit.v1.EdgeMetricsUpdate
 */
export type EdgeMetricsUpdate = Message<"audit.v1.EdgeMetricsUpdate"> & {
  /**
   * ID of the edge
   *
   * @generated from field: string edge_id = 1;
   */
  edgeId: string;

  /**
   * Updated connection metrics
   *
   * @generated from field: audit.v1.ConnectionMetrics metrics = 2;
   */
  metrics?: ConnectionMetrics;
};

/**
 * Describes the message audit.v1.EdgeMetricsUpdate.
 * Use `create(EdgeMetricsUpdateSchema)` to create a new message.
 */
export const EdgeMetricsUpdateSchema: GenMessage<EdgeMetricsUpdate> = /*@__PURE__*/
  messageDesc(file_audit_v1_topology_service, 26);

/**
 * @generated from enum audit.v1.NodeStatus
 */
export enum NodeStatus {
  /**
   * @generated from enum value: NODE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Service is running and healthy
   *
   * @generated from enum value: NODE_STATUS_LIVE = 1;
   */
  LIVE = 1,

  /**
   * Service is running but experiencing issues
   *
   * @generated from enum value: NODE_STATUS_DEGRADED = 2;
   */
  DEGRADED = 2,

  /**
   * Service is down or unreachable
   *
   * @generated from enum value: NODE_STATUS_DEAD = 3;
   */
  DEAD = 3,
}

/**
 * Describes the enum audit.v1.NodeStatus.
 */
export const NodeStatusSchema: GenEnum<NodeStatus> = /*@__PURE__*/
  enumDesc(file_audit_v1_topology_service, 0);

/**
 * @generated from enum audit.v1.EdgeStatus
 */
export enum EdgeStatus {
  /**
   * @generated from enum value: EDGE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Connection is healthy
   *
   * @generated from enum value: EDGE_STATUS_ACTIVE = 1;
   */
  ACTIVE = 1,

  /**
   * Connection has high latency or errors
   *
   * @generated from enum value: EDGE_STATUS_DEGRADED = 2;
   */
  DEGRADED = 2,

  /**
   * Connection is broken
   *
   * @generated from enum value: EDGE_STATUS_FAILED = 3;
   */
  FAILED = 3,
}

/**
 * Describes the enum audit.v1.EdgeStatus.
 */
export const EdgeStatusSchema: GenEnum<EdgeStatus> = /*@__PURE__*/
  enumDesc(file_audit_v1_topology_service, 1);

/**
 * @generated from enum audit.v1.ConnectionType
 */
export enum ConnectionType {
  /**
   * @generated from enum value: CONNECTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * gRPC service call
   *
   * @generated from enum value: CONNECTION_TYPE_GRPC = 1;
   */
  GRPC = 1,

  /**
   * HTTP/REST API call
   *
   * @generated from enum value: CONNECTION_TYPE_HTTP = 2;
   */
  HTTP = 2,

  /**
   * Logical data flow (not direct API call)
   *
   * @generated from enum value: CONNECTION_TYPE_DATA_FLOW = 3;
   */
  DATA_FLOW = 3,
}

/**
 * Describes the enum audit.v1.ConnectionType.
 */
export const ConnectionTypeSchema: GenEnum<ConnectionType> = /*@__PURE__*/
  enumDesc(file_audit_v1_topology_service, 2);

/**
 * Metadata sections available for nodes
 *
 * @generated from enum audit.v1.MetadataSection
 */
export enum MetadataSection {
  /**
   * Returns all sections
   *
   * @generated from enum value: METADATA_SECTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: METADATA_SECTION_BASIC_INFO = 1;
   */
  BASIC_INFO = 1,

  /**
   * @generated from enum value: METADATA_SECTION_HEALTH_METRICS = 2;
   */
  HEALTH_METRICS = 2,

  /**
   * @generated from enum value: METADATA_SECTION_ENDPOINTS = 3;
   */
  ENDPOINTS = 3,

  /**
   * @generated from enum value: METADATA_SECTION_CONFIGURATION = 4;
   */
  CONFIGURATION = 4,
}

/**
 * Describes the enum audit.v1.MetadataSection.
 */
export const MetadataSectionSchema: GenEnum<MetadataSection> = /*@__PURE__*/
  enumDesc(file_audit_v1_topology_service, 3);

/**
 * TopologyService provides real-time network topology information
 * for visualization and monitoring of the trading ecosystem.
 *
 * This service follows Clean Architecture patterns and supports:
 * - Lightweight topology structure for initial D3.js rendering
 * - On-demand metadata fetching with configurable fields
 * - Real-time streaming of structural changes and metrics
 * - Backward-compatible evolution via reserved fields
 *
 * @generated from service audit.v1.TopologyService
 */
export const TopologyService: GenService<{
  /**
   * GetTopologyStructure returns lightweight topology structure for initial render.
   * Returns node and edge summaries with status, suitable for D3.js force-directed graph.
   *
   * @generated from rpc audit.v1.TopologyService.GetTopologyStructure
   */
  getTopologyStructure: {
    methodKind: "unary";
    input: typeof GetTopologyStructureRequestSchema;
    output: typeof TopologyStructureResponseSchema;
  },
  /**
   * GetNodeMetadata returns detailed metadata for specific nodes.
   * Empty node_ids returns metadata for all nodes.
   * Supports configurable fields to fetch only required data.
   *
   * @generated from rpc audit.v1.TopologyService.GetNodeMetadata
   */
  getNodeMetadata: {
    methodKind: "unary";
    input: typeof GetNodeMetadataRequestSchema;
    output: typeof GetNodeMetadataResponseSchema;
  },
  /**
   * GetEdgeMetadata returns detailed metadata for specific edges.
   * Supports batch fetching for multiple edges.
   *
   * @generated from rpc audit.v1.TopologyService.GetEdgeMetadata
   */
  getEdgeMetadata: {
    methodKind: "unary";
    input: typeof GetEdgeMetadataRequestSchema;
    output: typeof GetEdgeMetadataResponseSchema;
  },
  /**
   * StreamTopologyChanges streams structural topology changes (add/remove/status).
   * Returns incremental changes, not full topology snapshots.
   *
   * @generated from rpc audit.v1.TopologyService.StreamTopologyChanges
   */
  streamTopologyChanges: {
    methodKind: "server_streaming";
    input: typeof StreamTopologyChangesRequestSchema;
    output: typeof TopologyChangeSchema;
  },
  /**
   * StreamMetricsUpdates streams high-frequency metrics updates.
   * Minimum update interval is 1 second (enforced server-side).
   * Empty node_ids/edge_ids subscribes to all elements.
   *
   * @generated from rpc audit.v1.TopologyService.StreamMetricsUpdates
   */
  streamMetricsUpdates: {
    methodKind: "server_streaming";
    input: typeof StreamMetricsUpdatesRequestSchema;
    output: typeof MetricsUpdateSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_audit_v1_topology_service, 0);

